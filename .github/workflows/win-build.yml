name: Build Sigil pn Windows

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  DOWNLOADQT: https://github.com/dougmassay/win-qtwebkit-5.212/releases/download/v5.212-1/MyQtx64_5.12.9_VS2017_WE.7z
  GDRIVE: https://github.com/dougmassay/win-qtwebkit-5.212/releases/download/v5.212-1/gdrive-windows-x64.exe
  QT: C:\MyQtx64_WE\Qt5.12.9
  INNO: C:\Program Files (x86)\Inno Setup 6
  CMAKE64BIT: -DWIN_INSTALLER_USE_64BIT_CRT=1

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - uses: actions/cache@main
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-test-build
        restore-keys: |
            ${{ runner.os }}-pip-test-build
    - name: Install dependencies
      run: |
        choco install ninja curl
        cd C:\
        curl.exe -L -o webkit.7z %DOWNLOADQT%
        7z x webkit.7z -y
        set PATH=%PYTHON%;%PYTHON%\Scripts;%QT%\bin;%INNO%;%PATH%
        pip install six==1.15.0
        pip install html5lib==1.1
        pip install regex==2020.6.8
        pip install css-parser==1.0.4
        pip install cssselect==1.1.0
        pip install urllib3==1.25.9
        pip install certifi==2020.6.20
        pip install dulwich==0.20.5 --global-option="--pure"
        pip install chardet==3.0.4
        pip install pillow==7.1.2
        pip install PyQt5==5.12.3 PyQt5-sip==4.19.19
        pip install lxml==4.5.1
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        mkdir ${{runner.workspace}}/build
        cd ${{runner.workspace}}/build
        curl.exe -L -o gdrive.exe %GDRIVE%
        gdrive.exe version
        qmake -v
        python --version
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64 -vcvars_ver=14.1
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -G "Ninja" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_ALT_ICONS=1 -DQt5_DIR=${{QT}}\lib\cmake\Qt5 ${{CMAKE64BIT}}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: ninja -j2
